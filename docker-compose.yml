# 智能文件轉換與RAG知識庫系統 - Docker Compose 配置
# 支持本地開發和生產部署

version: '3.8'

services:
  # ====== 主要應用服務 ======
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ap-rag-system
    restart: unless-stopped
    ports:
      - "${PORT:-8000}:8000"
    environment:
      - APP_ENVIRONMENT=${APP_ENVIRONMENT:-production}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-rag_system}
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    volumes:
      # 數據持久化
      - ./data:/app/data
      - ./logs:/app/logs
      # 配置文件
      - ./.env:/app/.env:ro
    depends_on:
      - postgres
      - redis
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ====== 開發模式服務 ======
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ap-rag-system-dev
    ports:
      - "${PORT:-8000}:8000"
    environment:
      - APP_ENVIRONMENT=development
      - APP_DEBUG=true
      - RELOAD=true
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-rag_system}
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    volumes:
      # 開發時代碼熱重載
      - ./src:/app/src
      - ./tests:/app/tests
      - ./data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    depends_on:
      - postgres
      - redis
    networks:
      - rag-network
    profiles:
      - dev

  # ====== 數據庫服務 ======
  postgres:
    image: postgres:15-alpine
    container_name: ap-rag-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-rag_system}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ====== Redis緩存服務 ======
  redis:
    image: redis:7-alpine
    container_name: ap-rag-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ====== 監控服務 ======
  prometheus:
    image: prom/prometheus:latest
    container_name: ap-rag-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./deploy/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - rag-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: ap-rag-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/monitoring/grafana:/etc/grafana/provisioning:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - rag-network
    profiles:
      - monitoring

  # ====== Nginx反向代理 ======
  nginx:
    image: nginx:alpine
    container_name: ap-rag-nginx
    restart: unless-stopped
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/ssl:/etc/nginx/ssl:ro
      - ./data/output/images:/var/www/images:ro  # 靜態圖片服務
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    depends_on:
      - app
    networks:
      - rag-network
    profiles:
      - production

  # ====== 文件處理工作服務 ======
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: ap-rag-worker
    restart: unless-stopped
    environment:
      - APP_ENVIRONMENT=${APP_ENVIRONMENT:-production}
      - WORKER_MODE=true
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-rag_system}
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - rag-network
    profiles:
      - production
      - worker

  # ====== MinIO對象存儲 (本地S3兼容) ======
  minio:
    image: minio/minio:latest
    container_name: ap-rag-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    networks:
      - rag-network
    profiles:
      - storage

  # ====== 測試數據庫 (僅用於測試) ======
  postgres-test:
    image: postgres:15-alpine
    container_name: ap-rag-postgres-test
    environment:
      - POSTGRES_DB=rag_system_test
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=testpassword
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - rag-network
    profiles:
      - test

# ====== 網路配置 ======
networks:
  rag-network:
    driver: bridge
    name: rag-network

# ====== 數據卷配置 ======
volumes:
  postgres_data:
    driver: local
    name: ap-rag-postgres-data
  
  postgres_test_data:
    driver: local
    name: ap-rag-postgres-test-data
  
  redis_data:
    driver: local
    name: ap-rag-redis-data
  
  prometheus_data:
    driver: local
    name: ap-rag-prometheus-data
  
  grafana_data:
    driver: local
    name: ap-rag-grafana-data
  
  minio_data:
    driver: local
    name: ap-rag-minio-data

# ====== 使用說明 ======
# 
# 啟動服務：
# - 生產環境：docker-compose up -d
# - 開發環境：docker-compose --profile dev up -d
# - 完整監控：docker-compose --profile monitoring up -d
# - 包含存儲：docker-compose --profile storage up -d
# - 測試環境：docker-compose --profile test up -d
#
# 管理命令：
# - 查看日誌：docker-compose logs -f app
# - 進入容器：docker-compose exec app bash
# - 重新構建：docker-compose build --no-cache
# - 清理資源：docker-compose down -v --remove-orphans
#
# 健康檢查：
# - 應用：http://localhost:8000/health
# - Grafana：http://localhost:3000 (admin/admin)
# - Prometheus：http://localhost:9090
# - MinIO Console：http://localhost:9001

